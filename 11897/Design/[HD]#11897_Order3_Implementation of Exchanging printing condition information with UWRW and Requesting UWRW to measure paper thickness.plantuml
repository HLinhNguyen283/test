**#11897_Order3 [HD] Implementation of "Exchanging printing condition information with UW/RW" and "Requesting UW/RW to measure paper thickness"**
====================================================================================

----------------------------------------------------------------
**Change log**
----------------------------------------------------------------

    =======     ==============      ===========     ============================================================================================================
    Rev.        Date                Author          Details
    =======     ==============      ===========     ============================================================================================================
    **1**       2023/01/31          GCS             Created
    =======     ==============      ===========     ============================================================================================================ 



----------------------------------------------------------------
**Target System**
----------------------------------------------------------------
    TP-J520HD V3.??JXD0xx


**Note for diagrams**
-----------------------

     .. uml::
     
        @startuml images\noteDiagram.png
        legend left
            |=Note for colors in diagram|
            |<back:Yellow>Updated source code</back>|
            |<back:Green>New source code</back>|
            |<back>Old source code</back>|
            |<back:red><strike>Deleted source code|
        endlegend
        @enduml

-----------------------------------------------------------
**【503】. Inquires about the web tension information (operation panel settings) when the test button is pressed. Store (※ Temporary specification of 【505】).**
-----------------------------------------------------------

    **1. Description**

        【503-01】

        Temporarily create a web tension inquiry test button on the TP system printing condition setting screen.When this button is pressed, it will be provisionally implemented so that the 【500-01】 "QueryResource" command is sent to each of UW and Also, it receives the response at this time, and stores the received web tension information in the printing conditions as shown in 【500-03】.
	       
            *  When the button is pressed, the print conditions at the save destination are set to the "current  print conditions".
	        
            *  ※Since this test button will be deleted when responding to the next "Requirement 4", it can be a temporary implementation. The position and design of the button does not matter. A design that does not require man-hours is good.

        【503-02】

        If there is no response from the UW/RW when inquiring about the above web tension information, or if there is an error response (returnCode is other than 0), the following warning message dialog will be displayed.
                                    
            * At this time, the following warning message dialog is displayed.
            
                - For UW
            
                    * (Ja) UWとの通信エラーが発生しました。UWのウェブテンションの取得に失敗しました。
            
                    * (En) A communication error with UW has occurred. Failed to get UW web tension.
            
                - For RW
            
                    * (Ja) RWとの通信エラーが発生しました。RWのウェブテンションの取得に失敗しました。
            
                    * (En) A communication error with UW has occurred. Failed to get RW web tension.
            
    **2. Solution**

    - Rename plugin UnwinderManager to UwRwManager.

    - In plugin UwRwManager, replace "Uw" in classes name by "UwRw".

    - In plugin UwRwManager, replace "Uw" in methods name by "UwRw".

    - in class CRequestUwRwThread, add variable to store name of UW or RW.

    ..  code-block:: C++
        :caption: dataIF.h

        // before
        UINT m_PaperReceivingTimeId;
        UINT m_StatusReceivingTimeId;

        // after 
        UINT m_PaperReceivingTimeId;
        UINT m_StatusReceivingTimeId;
        const char* m_DeviceName;

    **3. Detail implementation**

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 100.1 Initialize variable

            participant CWriteDebugLog as main
            ->main++: CRequestUwRwThread(const char* inDevicename)
                NOTE OVER OF main
                    Old implement
                END NOTE
                NOTE OVER OF main #green
                    m_DeviceName(inDevicename)
                END NOTE
                NOTE OVER OF main
                    Old implement
                END NOTE
            <--main--:
            @enduml

-----------------------------------------------------------------------------------------
**103. Xml output of send and receive contents**
-----------------------------------------------------------------------------------------

    **1. Description**
        103-01.

        Place the xml output of the sent / received contents directly under the folder in the following path.
            
            * D:\\TPJ_xx\\Client_xx\\Log\\UW_CONNECT\\yyyymmdd.xml 
            
            * D:\\TPJ_xx\\Client_xx\\Log\\RW_CONNECT\\yyyymmdd.xml 

        103-02.

        The output xml file is automatically deleted after a certain period of time.

            * UWandRW_Receiver.exe checks the above storage period at startup and deletes it if necessary.
            
            * The retention period of the xml file is defined in the "TP-UWRW_Communication.ini" file.

    **2. Solution**

        * In class CWriteDebugLog, add variable to store log folder path for RW.

         ..  code-block:: C++
                :caption: UWandRW_Receiver\\WriteDebugLog.h

                // before
                CString     m_strFileName;      //!< ログ出力フォルダの日付
                CString     m_strDate;          //!< ログ出力フォルダの日付
                CString     m_strOutputPath;    //!< ログ出力ファイルパス

                // after
                CString     m_strFileName[DEF_MAX_LOG_FOLDER];      //!< ログ出力フォルダの日付
                CString     m_strDate[DEF_MAX_LOG_FOLDER];          //!< ログ出力フォルダの日付
                CString     m_strOutputPath[DEF_MAX_LOG_FOLDER];    //!< ログ出力ファイルパス

        * In method CWriteDebugLog::InitializeXml, append set log folder path for RW.

        * In method CXmlLogData::GetLogFolderPath, append create Log folder path for RW.

        * In method CMainFunction::DeleteLogFolder, append delete log folder for RW.

    **3. Detail implementation**

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 103.1 Initialize log folder path for RW

            participant CWriteDebugLog as main
            ->main++: Initialize( const CString& inFileName )
                NOTE OVER OF main
                    Old implement
                END NOTE
                NOTE OVER OF main #red
                    <strike>m_strFileName = inFileName;

                    <strike>// ログ出力ファイル
                    <strike>CString OutputFolder = CCommon::GetModuleDirectory() + "\\Log";
                    <strike>if (!::PathFileExists(OutputFolder))
                    <strike>{	// 存在しない場合はフォルダを作成する
                    <strike>    ::SHCreateDirectory(NULL, A2W(OutputFolder.GetString()));
                    <strike>}
                    <strike>// ログファイルパス
                    <strike>m_strOutputPath = OutputFolder + "\\" + m_strFileName;
                END NOTE
                LOOP <color green> int index = 0; index < DEF_MAX_LOG_FOLDER; index++
                    NOTE OVER OF main #green
                        // ログ出力日付
                        m_strFileName[index] = inFileName;

                        // ログ出力ファイル
                        CString OutputFolder = CCommon::GetModuleDirectory() + "\\Log";
                        if (!::PathFileExists(OutputFolder))
                        {	// 存在しない場合はフォルダを作成する
                            ::SHCreateDirectory(NULL, A2W(OutputFolder.GetString()));
                        }
                        // ログファイルパス
                        m_strOutputPath[index] = OutputFolder + "\\" + m_strFileName;
                    END NOTE
                END 
            <--main--:
            @enduml

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 103.2 Set log folder path for RW

            participant CWriteDebugLog as main
            -[#green]>main++: InitializeXml( const CString& inFileName, const char* inDeviceName)
                NOTE OVER OF main
                    Old implement
                END NOTE
                NOTE OVER OF main #red
                    <strike>m_strFileName[index] = inFileName;

                    <strike>// ログ出力ファイル
                    <strike>CString OutputFolder = CCommon::GetModuleDirectory() + "\\Log\\" + inDeviceName + "_CONNECT\\" + CGetTime::GetStrDate() + ".xml";
                    <strike>if ( !::PathFileExists( OutputFolder ) )
                    <strike>{	// 存在しない場合はフォルダを作成する
                    <strike>    ::SHCreateDirectory( NULL, A2W(OutputFolder.GetString()) );
                    <strike>}
                    <strike>// ログファイルパス
                    <strike>m_strOutputPath[index] = OutputFolder + "\\" + m_strFileName[index];
                END NOTE
                NOTE OVER OF main #green
                    int index = strcmp(inDeviceName, DEF_UW) ? 1 : 0;
                    // ログ出力日付
                    m_strFileName[index] = inFileName;

                    // ログ出力ファイル
                    CString OutputFolder = CCommon::GetModuleDirectory() + "\\Log\\" + inDeviceName + "_CONNECT\\" + CGetTime::GetStrDate() + ".xml";
                    if ( !::PathFileExists( OutputFolder ) )
                    {	// 存在しない場合はフォルダを作成する
                        ::SHCreateDirectory( NULL, A2W(OutputFolder.GetString()) );
                    }
                    // ログファイルパス
                    m_strOutputPath[index] = OutputFolder + "\\" + m_strFileName[index];
                END NOTE
            <--main--:
            @enduml

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 103.3 Write debug log for RW

            participant CWriteDebugLog as main
            -[#green]>main++: WriteDebuglog( const CString& inStrLogInfo, \nE_LOG_LEVEL inDebugLevel, BOOL inTime , const char* inDeviceName)
                NOTE OVER OF main
                    Old implement
                END NOTE
                NOTE OVER OF main #red
                    <strike>fopen_s(&fpTest, m_strOutputPath, _T("a"));
                END NOTE
                NOTE OVER OF main #green
                    fopen_s(&fpTest, m_strOutputPath[strcmp(inDeviceName, DEF_UW) ? 1 : 0], _T("a"));
                END NOTE
                NOTE OVER OF main
                    Old implement
                END NOTE
            <--main--:
            @enduml

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 103.4 Get log folder path

            participant CXmlLogData as main
            -[#green]>main++: <color green>GetLogFolderPath(const char* inDeviceName)
                NOTE OVER OF main
                    Old implement
                END NOTE
                NOTE OVER OF main #red
                    <strike>LogFolderPath.append("\\LOG\\UW_CONNECT\\");
                END NOTE
                NOTE OVER OF main #green
                    LogFolderPath.append("\\LOG\\");
                    LogFolderPath.append(inDeviceName);
                    LogFolderPath.append("_CONNECT\\");
                END NOTE
                NOTE OVER OF main
                    Old implement
                END NOTE
            <--main--: LogFolderPath
            @enduml

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 103.5 Delete log folder

            participant CMainFunction as main
            -[#green]>main++: DeleteLogFolder(CWriteDebugLog* inWriteDebugLog)
                NOTE OVER OF main #red
                    <strike>CString LogTopFoler = CCommon::GetModuleDirectory() + "\\Log\\UW_CONNECT\\";

                    <strike>CIni_UwRwManager iniUnwinderManager;
                    <strike>iniUnwinderManager.Initialize(TRUE);

                    <strike>CDeleteLogFolder sDeleteLogFolder(inWriteDebugLog);
                    <strike>sDeleteLogFolder.Doit(LogTopFoler, iniUnwinderManager.getPeriod_day());
                END NOTE
                LOOP <color green>int index = 0; index < DEF_MAX_LOG_FOLDER; index++
                    NOTE OVER OF main #green
                        CString LogTopFoler = CCommon::GetModuleDirectory() + "\\Log\\" + ((index == 0)? DEF_UW : DEF_RW) + "_CONNECT\\";

                        CIni_UwRwManager iniUnwinderManager;
                        iniUnwinderManager.Initialize(TRUE);

                        CDeleteLogFolder sDeleteLogFolder(inWriteDebugLog);
                        sDeleteLogFolder.Doit(LogTopFoler, iniUnwinderManager.getPeriod_day());
                    END NOTE
                END
            <--main--:
            @enduml

-----------------------------------------------------------------------------------------
**200. Enable/disable of XJMF communication with UW/RW**
-----------------------------------------------------------------------------------------
    **1. Description**
        200-01.

        201-4xx XJMF communication specifications work only when the following key is set to 1.
        
            * [File name]: PrinterDescriptor.ini
        
            * [Section name]: OPTION
            
            * [Key name: 1]: UW_CONNECT_FUNCTION
        
            * [Key name: 2]: RW_CONNECT_FUNCTION

                * The default value for the above keys is 0.
                
                * Manually change to 1 during setup when communication with UW/RW made by Ho.
                
                * It is also possible to communicate with only one of UW and RW

    **2. Solution**
        
        - In class CIni_PrinterDescriptor, add method to get value of RW_CONNECT_FUNCTION key from PrinterDescriptor.ini file.

        ..  code-block:: C++
                :caption: Common\\Ini_PrinterDescriptor.h

                public:
                ...
                /**
                    @brief	Get Rewinder Option
                    @retval 1: enable RewinderManager function
                    @retval 0: disable RewinderManager function
                */
                UINT getRewinderOption();

        ..  code-block:: C++
                :caption: Common\\Ini_PrinterDescriptor.cpp

                UINT CIni_PrinterDescriptor::getRewinderOption()
                {
                    return GetValueInt("OPTION", "RW_CONNECT_FUNCTION", 0);
                }

        - In CDataIF class, add new variable to handle Rewinder thread.

            ..  code-block:: C++
                :caption: Common\\Ini_PrinterDescriptor.cpp

                // before
                unwinder_manager::CRequestUwRwThread m_RequestUnwinderThread;

                // after
                uwrw_manager::CRequestUwRwThread m_RequestUnwinderThread;
	            uwrw_manager::CRequestUwRwThread m_RequestRewinderThread;

    **3. Detail implementation**

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 200.1 Create thread for Query Status 

            participant CDataIF as main
            ->main++: PIM_InitSystem()
                NOTE OVER OF main 
                    Old implement
                END NOTE
                OPT <color green>m_IniPrinterDescriptor.getRewinderOption() == 1
                    NOTE OVER OF main #green
                       m_RequestRewinderThread.StartThread();
                    END NOTE
                END
            <--main--: TRUE
            @enduml

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 200.2 Delete thread of Query Status 

            participant CDataIF as main
            ->main++: PIM_ExitSystem()
                NOTE OVER OF main #red
                    Old implement
                END NOTE
                OPT <color green>m_IniPrinterDescriptor.getRewinderOption() == 1
                    NOTE OVER OF main #green
                       m_RequestRewinderThread.EndThread();
                    END NOTE
                END
            <--main--: TRUE
            @enduml

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 200.3 Callback when job run

            participant CDataIF as main
            ->main++: OnFirstJobRun(const std::string& inSectionId)
                NOTE OVER OF main
                    Old implement
                END NOTE
                OPT <color green>m_IniPrinterDescriptor.getRewinderOption() == 1
                    NOTE OVER OF main #green
                       m_RequestRewinderThread.MsgNotifyAndQueryResource(inSectionId);
                    END NOTE
                END
            <--main--:
            @enduml

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 200.4 Get paper thickness

            participant CDataIF as main
            ->main++: GetUWPaperThickness(long &outThickness)
                OPT <color red><strike>m_IniPrinterDescriptor.getUnwinderOption() == 1
                NOTE OVER OF main #red
                    <strike>m_receiveSignalStatus.GetUWPaperThickness(outThickness);
                END NOTE
                END
                OPT <color green>(m_IniPrinterDescriptor.getUnwinderOption() == 1) || (m_IniPrinterDescriptor.getRewinderOption() == 1)
                    NOTE OVER OF main #green
                       m_receiveSignalStatus.GetUWPaperThickness(outThickness);
                    END NOTE
                END
            <--main--:
            @enduml

-----------------------------------------------------------------------------------------
**300. Status monitoring channel (channel registration)**
-----------------------------------------------------------------------------------------
    
    **1. Description**
        
        300-01.

        The controller registers the communication channel for status monitoring in order to obtain status information from UW/RW.
        
            * Channel registration is done for each of UW and RW.

        300-03.

        Channel registration is performed by notifying the UW/RW of the "QueryStatus" command by specifying Subscription from the controller.
            
            * For Subscription, specify the following information.
            
                * URL (information notification destination)
            
                * RepeatTime (Regular notification interval from UW/RW)
            
            * The specified value is defined in "TP-UWRW_Communication.ini".

        300-04.

        If channel registration is successfully completed (returncode=0), Receive channel ID (refID) in response from UW/RW.
        
            * Store the received channel ID in "Status_CannelID" of "TP-UWRW_Communication_work.ini" 

        300-05.

        If there is no channel registration result response from UW/RW, or if the channel registration result is abnormal (returncode=other than 0), it is determined that UW/RW is not activated.
        
            * At this time, store "" (empty value) in "Status" of "TP-UWRW_Communication_work.ini"

        300-06.

        | If there is no channel registration result response from UW/RW, a Ping confirmation timer is issued and a reconnection request is made.
        | If the ping passes, the channel registration for the status monitoring channel is performed until the channel registration is completed. 

    **2. Solution**

        - Status monitoring channel:
            + In CRequestUnwinderThread::ThreadProc() method, call to RequestQueryStatus() to request status of RW.
           
        - In CMakeComposeUwRwData::GetURL() method, append create URL for RW query status.

        - In CIni_UwRwManager_work::putStatusCannelID() method, append saving channel ID response from RW.

        - In CIni_UwRwManager_work::putUnwinderStatus() method, append saving Status for RW.

    **3. Detail implementation**

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 300.1 Get the URL to set in XJMF

            participant CMakeComposeUwRwData as main
            -[#green]>main++: GetURL(int inType, const char* inDeviceName)
                NOTE OVER OF main
                    Old implement
                END NOTE
                NOTE OVER OF main #red
                    <strike>std::string ReceiverPort = m_IniUnwinderManager.getReceiver_Port();
                    <strike>std::string FolderName;
                END NOTE
                OPT <color red><strike>inType == E_Compose_QueryStatus
                    NOTE OVER OF main #red
                       <strike>FolderName = m_IniUnwinderManager.getStatus_Folder();
                    END NOTE
                ELSE
                    NOTE OVER OF main #red
                       <strike>FolderName = m_IniUnwinderManager.getResource_Folder();
                    END NOTE
                END
                NOTE OVER OF main #green
                    std::string ReceiverPort = m_IniUnwinderManager.getReceiver_Port(inDeviceName);
                    std::string FolderName;
                END NOTE
                OPT <color green>inType == E_Compose_QueryStatus
                    NOTE OVER OF main #green
                       FolderName = m_IniUnwinderManager.getStatus_Folder(inDeviceName);
                    END NOTE
                ELSE
                    NOTE OVER OF main #green
                       FolderName = m_IniUnwinderManager.getResource_Folder(inDeviceName);
                    END NOTE
                END
                NOTE OVER OF main
                    Old implement
                END NOTE
            <--main--: URL
            @enduml

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 300.2 Save channel ID

            participant CIni_UwRwManager_work as main
            -[#green]>main++: putStatusCannelID( const std::string& inCannelID, \nconst char* inDeviceName)
                NOTE OVER OF main #red
                    <strike>return WriteValueString("CHANNEL_UW", "Status_CannelID", inCannelID.c_str());
                END NOTE
                
                NOTE OVER OF main #green
                    return WriteValueString(std::string("CHANNEL_").append(inDeviceName).c_str(), "Status_CannelID", inCannelID.c_str());
                END NOTE
            <--main--: 
            @enduml

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 300.3 Save status of Unwinder

            participant CIni_UwRwManager_work as main
            -[#green]>main++: putUnwinderStatus( const std::string& inStatus, const char* inDeviceName)
                NOTE OVER OF main #red
                    <strike>return WriteValueString("STATUS_INFO_UW", "Status", inStatus.c_str());
                END NOTE
                
                NOTE OVER OF main #green
                    return WriteValueString(std::string("STATUS_INFO_").append(inDeviceName).c_str(), "Status", inStatus.c_str());
                END NOTE
            <--main--: 
            @enduml

-----------------------------------------------------------------------------------------
**301. Status monitoring channel (channel deletion)**
-----------------------------------------------------------------------------------------
    
    **1. Description**

        301-01.

        Deletion of the registered channel is performed by notifying the UW/RW of the "StopPresChParam" command from the controller.
        
            * Specify the channel ID at the time of channel registration to "ChannelID" of the "StopPresChParam" command
            
            * Obtain the channel ID when registering a channel from "Status_CannelID" in "TP-UWRW_Communication_work.ini" 
            
            * When receiving a successful channel deletion response, also delete "Status_CannelID" in "TP-UWRW_Communication_work.ini" (store a empty value).

        301-02.
        
        When registering a channel, if the channel information has already been registered, delete the channel first.
        
            * Applicable when there is a value in "Status_CannelID" in "TP-UWRW_Communication_work.ini"

        301-03.

            * When the controller ends, delete the channel first.

    **2. Solution**

        - In CIni_UwRwManager_work::putStatusCannelID method, append set Status_CannelID for RW.

        - In CRequestUwRwThread::ThreadProc() method, check for existing channel IDs in TP-UW_Communication_work.ini and delete them.
        
        - In CRequestUwRwThread::CheckEvents() method, when WM_TIMER message is received, delete the channel IDs in TP-UWRW_Communication_work.ini file.
        
        - In CRequestUwRwThread::ThreadProc() method, wait for process "UWandRW_Receiver.exe" to end or m_ExitThread set.
        
        - In CRequestUwRwThread::ThreadProc() method, call to RequestStopPersChParams() for channel which has been registered.

    **3. Detail implementation**

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 301.1 Set status monitoring channel ID

            participant CIni_UwRwManager_work as main
            -[#green]>main++: PutStatusCannelID(const std::string& inCannelID, const char* inDeviceName)
                NOTE OVER OF main #red
                    <strike>return WriteValueString("CHANNEL", "Status_CannelID", inCannelID.c_str());
                END NOTE
                
                NOTE OVER OF main #green
                    return WriteValueString(std::string("CHANNEL_").append(inDeviceName).c_str(), "Status_CannelID", inCannelID.c_str());
                END NOTE
            <--main--: 
            @enduml

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 301.2 Delete channel ID

            participant CRequestUwRwThread as main
            -[#green]>main++: CheckEvents()
                NOTE OVER OF main
                    Old implement
                END NOTE
                NOTE OVER OF main #red
                    <strike>m_dataIF->PutStatusCannelID("");
					<strike>m_dataIF->PutResourceCannelID("");
                END NOTE
                
                NOTE OVER OF main #green
                    m_dataIF->PutStatusCannelID("", m_DeviceName);
                    m_dataIF->PutResourceCannelID("", m_DeviceName);
                END NOTE
            <--main--: 
            @enduml

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 301.3 Create transmission data for channel deletion (Stop PersChParams)

            participant CMakeComposeUwRwData as main
            -[#green]>main++: ParameterStopPersChParams(int \ninType, const char* inDeviceName)
                NOTE OVER OF main
                    Old implement
                END NOTE
                NOTE OVER OF main #red
                    <strike>NameValueTable["ChannelID"]			= GetChannelID(inType);
                    <strike>NameValueTable["MessageType"]		= GetMessageType();
                    <strike>NameValueTable["URL"]				= GetURL(inType );
                END NOTE
                
                NOTE OVER OF main #green
                    NameValueTable["ChannelID"]			= GetChannelID(inType, inDeviceName);
                    NameValueTable["MessageType"]		= GetMessageType();
                    NameValueTable["URL"]				= GetURL(inType, inDeviceName);
                END NOTE
                NOTE OVER OF main
                    Old implement
                END NOTE
            <--main--: 
            @enduml

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 301.4 Request stop PersChParams

            participant CRequestUwRw as main
            ->main++: RequestStopPersChParams(int inStopType)
                NOTE OVER OF main
                    Old implement
                END NOTE
                NOTE OVER OF main #red
                    <strike>UwXjmfDataMap sUwSendDataMap = m_UnwinderData->ParameterStopPersChParams(inStopType);
                END NOTE
                
                NOTE OVER OF main #green
                    UwXjmfDataMap sUwSendDataMap = m_UnwinderData->ParameterStopPersChParams(inStopType, m_Thread->getDevicename());
                END NOTE
                NOTE OVER OF main
                    Old implement
                END NOTE
                NOTE OVER OF main #red
                    <strike>m_UnwinderData->PutStatusCannelID(CannelID);
                END NOTE
                
                NOTE OVER OF main #green
                    m_UnwinderData->PutStatusCannelID(CannelID, m_Thread->getDevicename());
                END NOTE
                NOTE OVER OF main
                    Old implement
                END NOTE
            <--main--: ResultData
            @enduml

-----------------------------------------------------------------------------------------
**302. Status monitoring channel (receiving periodic notifications)**
-----------------------------------------------------------------------------------------
    
    **1. Description**

        302-01.

        When the channel registration is performed normally, the UW/RW notifies the "SignalStatus" command at the specified interval. The controller receives this.

        302-02.

        Receive the following information with the "SignalStatus" command from UW/RW and store the information
        
            - DeviceInfo/Status (UW/RW device status)
                
                * Store the received value in "Status" of "TP-UWRW_Communication_work.ini"
                
                * UW/RW device status list

                .. image:: images/302_1.PNG
                    :width: 90%

        302-03.

        If there is no "SignalStatus" from the UW/RW after the interval + α seconds specified when the controller registers the status monitoring channel, it determines that the UW/RW has not started.
            
            * +α seconds is defined in the "TP-UWRW_Communication.ini" file.
            
            * At this time, store "" (empty value) in "Status" of "TP-UWRW_Communication_work.ini"
            
            * At this time, the following warning message dialog is displayed.
            
                - For UW
            
                    * (Ja) UWとの通信エラーが発生しました。
            
                    * (En) A communication error with UW has occurred.
            
                - For RW
            
                    * (Ja) RWとの通信エラーが発生しました。
            
                    * (En) A communication error with RW has occurred.
            
            * At this time, a Ping confirmation timer is issued and a reconnection request is issued.
        
        If the ping passes, the channel registration for the status monitoring channel is performed until the channel registration is completed.

    **2. Solution**

    - In method CDataIF::UpdateDisplayUWStatus(), post a message about RW status and display the warning dialog when RW is offline
        - In method CRequestUwRwThread::CheckReceiverRunning(), if UWandRW_Receiver.exe is not run, call method UpdateDisplayUWStatus(false) to display UW offline icon.
        
        - In method CRequestUwRwThread::CheckUWStatus(), 
            
            + If receive the response from RW successfully, call method UpdateDisplayUWStatus(true) to display RW online icon.
            
            + Else, call method UpdateDisplayUWStatus(false) to display RW offline icon.
        
        - In method CReceiveSignalStatus::ReceiveStatusInfo:

            + Stop the current timeout timer and start a new one.

            + Set the RW status into UnwinderManager_work.ini file.

            + call method UpdateDisplayUWStatus(true) to display RW online icon.

    **3. Detail implementation**

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 302.1 Receive Signal status

            participant CReceiveSignalStatus as main
            ->main++: ReceiveInfo()
                NOTE OVER OF main
                    Old implement
                END NOTE
                NOTE OVER OF main #red
                    <strike>hPipe = CreateNamedPipe("\\\\.\\pipe\\Unwinder",		//lpName
                                                        <strike>//Temporary comment PIPE_ACCESS_INBOUND | FILE_FLAG_OVERLAPPED,            // dwOpenMode
                                                        <strike>PIPE_ACCESS_INBOUND,
                                                        <strike>PIPE_TYPE_BYTE | PIPE_WAIT,  
                                                        <strike>1,                          
                                                        <strike>0,                           
                                                        <strike>0,                             
                                                        <strike>100,                          
                                                        <strike>NULL);                       
                END NOTE
                
                NOTE OVER OF main #green
                    hPipe = CreateNamedPipe(string("\\\\.\\pipe\\").append(strcmp(m_RequestThread->getDevicename(), "RW") ? "Unwinder" : "Rewinder").c_str(),		//lpName
                                                //Temporary comment PIPE_ACCESS_INBOUND | FILE_FLAG_OVERLAPPED,            // dwOpenMode
                                                PIPE_ACCESS_INBOUND,
                                                PIPE_TYPE_BYTE | PIPE_WAIT,  
                                                1,                             
                                                0,                            
                                                0,                             
                                                100,                       
                                                NULL);                        
                END NOTE
                NOTE OVER OF main
                    Old implement
                END NOTE
                NOTE OVER OF main #red
                    <strike>ss << "[CReceiveSignalStatus::ReceiveInfo] CreateNamedPipe(\\\\.\\pipe\\Unwinder) Error GetLastError=" << GetLastError();
                END NOTE
                
                NOTE OVER OF main #green
                    ss << "[CReceiveSignalStatus::ReceiveInfo] CreateNamedPipe(\\\\.\\pipe\\" << (strcmp(m_RequestThread->getDevicename(), "RW") ? "Unwinder" : "Rewinder") <<") Error GetLastError=" << GetLastError();
                END NOTE
                NOTE OVER OF main
                    Old implement
                END NOTE
            <--main--: nRet
            @enduml

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 302.3 Save value of Status to ini file

            participant CReceiveSignalStatus as main
            ->main++: ReceiveStatusInfo( const std::string& inStatus )
                NOTE OVER OF main
                    Old implement
                END NOTE
                NOTE OVER OF main #red
                    <strike>CIni_UwRwManager_work iniUnwinderManager_work;
                    <strike>iniUnwinderManager_work.Initialize(TRUE);
                    <strike>iniUnwinderManager_work.putUnwinderStatus(inStatus);
                END NOTE
                NOTE OVER OF main #green
                    CIni_UwRwManager_work iniUwRwManager_work;
                    iniUwRwManager_work.Initialize(TRUE);
                    iniUwRwManager_work.putUwRwStatus(inStatus, m_RequestThread->getDevicename());
                END NOTE
            <--main--: TRUE
            @enduml

-----------------------------------------------------------------------------------------
**400. Paper information notification channel (channel registration)**
-----------------------------------------------------------------------------------------

    **1. Description**
        400-02.

        The channel registration timing is set immediately after the controller notify printing condition information to UW/RW by "CommandResource" command and receives a response from the UW when the controller is started.

        However, the process of notifying "CommandResource" to UW/RW is will be addressed in the next "Order 3".

        Therefore, at the time of "Order 2", the channel registration timing shall be the time when the controller starts up.

        400-04.

        If channel registration is successfully completed (returncode=0 or returncode=18), receive channel ID (refID) in response from UW/RW.
        
            * Store the received channel ID in "Resource_CannelID" of "TP-UWRW_Communication_work.ini"

        400-05.

        In the case of channel registration with UW, the presence or absence of the paper thickness gauge option is obtained from the return code upon completion. Not applicable for channel registration with RW.
            
            * If returncode=0, determine that there is a paper thickness gauge option, and store 1 in "Enable_ThicknessMeasureOP" of "TP-UWRW_Communication_work.ini"
            
            * If returncode=18, determine that there is no paper thickness gauge option and store 0 in "Enable_ThicknessMeasureOP" of "TP-UWRW_Communication_work.ini"

    **2. Solution**

        - In method CRequestUwRwThread::NotifyAndQueryResource(), temporarily comment out call to CRequestUwRw::RequestCommandResource().

        - In plugin PrintConditionGUI and JobPrintSequence, temporarily comment out call to SUnwinderManager_Callbacks callback functions.

        - In method CRequestUwRw::RequestQueryResource(), store the received channel ID when returncode=18.

        - In method CRequestUwRw::RequestQueryResource(), store the received Enable_ThicknessMeasureOP value when returncode=0 or returncode=18.

        - In method CIni_UwRwManager_work::putResourceCannelID(), add parameter inDeviceName.

        - Add method CIni_UwRwManager_work::putEnable_ThicknessMeasureOP() to store the value to ini file.
        
        ..  code-block:: C++
            :caption: Ini_UWRWManager_work.h

            // before
            class CIni_UwRwManager_work
            {
                BOOL putResourceCannelID( const std::string& inCannelID);
            }

            // after
            class CIni_UwRwManager_work
            {
                BOOL putResourceCannelID( const std::string& inCannelID, const char* inDeviceName);
                ...
                BOOL putEnable_ThicknessMeasureOP( const std::string& inEnable_ThicknessMeasureOP, const char* inDeviceName);
            }

        
    **3. Detail implementation**

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 400.1 Remove CommandResource for Order2

            participant CRequestUwRwThread as main
            participant CRequestUwRw as req
            -> main++: NotifyAndQueryResource(sectionId)
                NOTE over main #red: <strike>CUnwinderPaper unwinderPaper;
                ALT <color red><strike>sectionId == ""
                    main-[#red]> main++: <color red><strike>GetPrintConditionResourceInfo(&unwinderPaper)
                     return
                ELSE
                    main-[#red]> main++: <color red><strike>GetJobResourceInfo(&unwinderPaper, sectionId)
                    return
                END
                main-[#red]>req++: <color red><strike>RequestCommandResource(unwinderPaper)
                return <color red><strike>result
                REF OVER main: Old implementation
            return
            @enduml

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 400.2 Remove channel registration when switching current print condition

            participant "PrintConditionGUI\CDataIF" as data1
            participant SUnwinderManager_Callbacks as cb
            participant Plugin_IF as plugin
            -> data1++: SetCurrentPrintCondition()
                NOTE over data1: Old implementation
                data1-[#red]>plugin++: <color red><strike>_UnwinderManager_GetCallbacks()
                    create cb
                    plugin-[#red]>cb: <color  red><strike> create
                return <color red><strike>callback
                data1-[#red]>cb++: <color red><strike>OnSetCurrentPrintCondition()
                return
            return
            @enduml

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 400.3 Remove channel registration when changing the current print condition setting

            participant "PrintConditionGUI\CDataIF" as data1
            participant SUnwinderManager_Callbacks as cb
            participant Plugin_IF as plugin
            -> data1++: SavePrintCondition()
                NOTE over data1: Old implementation
                NOTE over data1 #red
                    <strike>bool selecting = false;
                    <strike>const char* printConditionName = NULL;
                    <strike>bool ret = m_PrintSettings->GetCurrentPrintCondition(
                    <strike>&selecting, &printConditionName);
                END NOTE
                OPT <color red><strike>ret == TRUE && selecting == TRUE
                    data1-[#red]>plugin++: <color red><strike>_UnwinderManager_GetCallbacks()
                        create cb
                        plugin-[#red]>cb: <color  red><strike> create
                    return <color red><strike>callback
                    data1-[#red]>cb++: <color red><strike>OnUpdateCurrentPrintCondition()
                    return
                END
            return
            @enduml


        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 400.4 Remove channel registration when job is running

            participant "JobPrintSequence\JobPrintManager" as proc
            participant SUnwinderManager_Callbacks as cb
            participant Plugin_IF as plugin
            -> proc++: runJob(\nbool inIsFirstJob,\nbool inIsJobPrintStartButtonPushed)
                NOTE over proc: Old implementation
                OPT getSectionIDOfTopJob(&jobManagerCb, sectionID) == TRUE
                    proc-[#red]>plugin++: <color red><strike>_UnwinderManager_GetCallbacks()
                        create cb
                        plugin-[#red]>cb: <color red><strike>create
                    return <color red><strike>callback
                    proc-[#red]>cb++: <color red><strike>OnFirstJobRunsectionID()
                    return
                END
                NOTE over proc: Old implementation
            return
            @enduml


        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 400.5 Remove channel registration when the job running status is released

            participant "JobPrintSequence\JobPrintManager" as proc
            participant "SUnwinderManager_Callbacks" as cb
            participant Plugin_IF as plugin
            -> proc++: ProStartJobPrintSeq()
                NOTE over proc: Old implementation
                proc-[#red]>plugin++: <color red><strike>_UnwinderManager_GetCallbacks()
                    create cb
                    plugin-[#red]>cb: <color red><strike>create
                return <color red><strike>callback
                proc-[#red]>cb++: <color red><strike>OnEndJobRun();
                return
                NOTE over proc: Old implementation
            return
            @enduml


       ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 400.6 Register paper information notification channel

            participant CRequestUwRwThread as main
            participant CRequestUwRw as req
            participant CIni_UwRwManager_work as ini
            -> main++: NotifyAndQueryResource()
                main->req++: RequestQueryResource()
                    NOTE over req: ...
                    OPT <color red><strike>ReturnCode == "0"
                        req -[#red]>ini++: <color red><strike>PutResourceCannelID(channelID)
                        return
                    END
                    OPT <color green>ReturnCode == "0" || ReturnCode == "18"
                        req -[#green]>ini++: <color green>PutResourceCannelID(channelID, m_DeviceName)
                        return
                    END
                return result
                OPT result.find("[SUCCESS]") != std::string::npos
                    NOTE OVER main
                        Old implementation
                    END NOTE
                    OPT <color green> m_DeviceName == "UW"
                        ALT <color green>ReturnCode == "0"
                            req -[#green]>ini++: <color green>PutEnable_ThicknessMeasureOP("1", m_DeviceName)
                            return
                        ELSE <color green>ReturnCode == "18"
                            req -[#green]>ini++: <color green>PutEnable_ThicknessMeasureOP("0", m_DeviceName)
                            return
                        END
                    END
                END
            return
            @enduml

-----------------------------------------------------------------------------------------
**401. Paper information notification channel(channel deletion)**
-----------------------------------------------------------------------------------------

    **1. Description**

        401-01.

        Deletion of the registered channel is performed by notifying the UW/RW of the "StopPresChParam" command from the controller.
        
            * Specify the channel ID at the time of channel registration to "ChannelID" of the "StopPresChParam" command

            * Obtain the channel ID when registering a channel from "Status_CannelID" in "TP-UWRW_Communication_work.ini"

            * When receiving a successful channel deletion response, also delete "Status_CannelID" in "TP-UWRW_Communication_work.ini" (store a empty value).

        401-02.

        When registering a channel, if the channel information has already been registered, delete the channel first.

            * Applicable when there is a value in "Status_CannelID" in "TP-UWRW_Communication_work.ini"

        401-03.
        When the controller ends, delete the channel first.

    **2. Solution**

      - In CRequestUwRwThread::ThreadProc(), CRequestUwRwThread::CheckEvents(), and CRequestUwRw::RequestStopPersChParams(), update the call to CIni_UwRwManager_work::putResourceCannelID() with DeviceName.
        
    **3. Detail implementation**

    ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 401.1 Delete channels when controller starts

            participant CRequestUWRWThread as main
            participant CIni_UwRwManager_work as ini
            -> main++: ThreadProc()
                NOTE over main: Old implementation
                main-[#red]> ini++: <color red><strike>putResourceCannelID("")
                return
                main-[#green]> ini++: <color green>putResourceCannelID("", m_DeviceName)
                return
                NOTE over main: Old implementation
            return
            @enduml


    ..  uml::

        @startuml
        skinparam noteBackgroundColor #DDDDDD
        skinparam noteBorderColor #666666

        autonumber "<b>[000]"
        hide footbox
        TITLE 401.2 Delete channels when not receiving signal resource

        participant CRequestUwRwThread as main
        participant CIni_UwRwManager_work as ini
        -> main++: CheckEvents()
        NOTE over main: Old implementation
        main-[#red]> ini++: <color red><strike>putResourceCannelID("")
        return
        main-[#green]> ini++: <color green>putResourceCannelID("", m_DeviceName)
        return
        NOTE over main: Old implementation
        return
        @enduml


    ..  uml::

        @startuml
        skinparam noteBackgroundColor #DDDDDD
        skinparam noteBorderColor #666666

        autonumber "<b>[000]"
        hide footbox
        TITLE 401.3 Delete channels when controller ends

        participant CRequestUwRw as main
        participant CIni_UwRwManager_work as ini
        -> main++: RequestStopPersChParams(\t\nE_Compose_QueryResource)
            NOTE over main: Old implementation
            main-[#red]> ini++: <color red><strike>putResourceCannelID("")
            return
            main-[#green]> ini++: <color green>putResourceCannelID("", m_DeviceName)
            return
        return
        @enduml

-----------------------------------------------------------------------------------------
**402. Paper information notification channel (receiving periodic notifications)**
-----------------------------------------------------------------------------------------

    **1. Description**

        402-02.

        Receive the following information with the "SignalResouce" command from UW/RW, store necessary information in "TP-UWRW_Communication_work.ini"
        
            * Receive but do not need to store

                * Resource/Dimension.X (UW/RW paper width)
                
                * Resource/MediaType (UW/RW media name)
                
                * Resource/Weight (UW/RW paper weight)
                
                * Resource/Thickness (UW/RW paper thickness)
                
                * Resource/UWDancerWebTension (UW dancer web tension)
                
                * Resource/RWDancerWebTension (RW dancer web tension)
                
                * Resource/RWWindingTension (RW winding tension)
            
            * Items that need to be stored

                * Resource/Dimension.Y (for UW: remaining amount of paper, for RW: windable amount of paper)
                
                * Resource/scr:RollDiameter (UW/RW roll diameter)
                
                * Resource/scr:StopRollDiameter (UW/RW stop roll diameter)

        402-03.

        Regarding 402-02, for the information that the value of "-1" was notified in "SignalResouce" from UW/RW, do not store the received information in "TP-UWRW_Communication_work.ini".
        
            * ① UW/RW hides the remaining amount of paper on the operation panel when the roll is not set, and notifies the TP of -1 using "SignalResouce".
            
            * ② UW/RW calculates the approximate amount of remaining paper immediately after the roll is set or the power is turned on, and displays it on the operation panel. At this time, the TP is notified to -1 by 'SignalResource".
            
            * ③ When roll transport is performed, the final value for the remaining amount of paper is calculated, the display on the operation panel is updated, and the final value for the remaining amount of paper is notified to the TP by "SignalResource".

        402-04.

        If there is no "SignalResouce" from the UW/RW after the interval + α seconds specified when the controller registers the status monitoring channel, it determines that the UW/RW has not started.
        
            * +α seconds is defined in the "TP-UWRW_Communication.ini" file.
            
            * At this time, the following warning message dialog is displayed.
                
                * For UW
                    
                    * (Ja) UWとの通信エラーが発生しました。
                    
                    * (En) A communication error with UW has occurred.
                
                * For RW
                    
                    * (Ja) RWとの通信エラーが発生しました。
                    
                    * (En) A communication error with RW has occurred.
                
                * At this time, a Ping confirmation timer is issued and a reconnection request is issued.
                
                If the ping passes, the channel registration for the status monitoring channel is performed until the channel registration is completed.

    **2. Solution**

    - In method CIni_UwRwManager_work::putPaperRollDiameter(), CIni_UwRwManager_work::putPaperRemainingAmount(), add inDeviceName parameter.

    - Add method CIni_UwRwManager_work::putPaperStopRollDiameter() to save StopRollDiameter information.

    ..  code-block:: C++
        :caption: Ini_UWRWManager_work.h

        // before
        class CIni_UwRwManager_work
        {
            BOOL putPaperRollDiameter( const std::string& inRollDiameter );
            BOOL putPaperRemainingAmount( const std::string& inRemainingAmount );
        }

        // after
        class CIni_UwRwManager_work
        {
            BOOL putPaperRollDiameter( const std::string& inRollDiameter, const char* inDeviceName );
            BOOL putPaperRemainingAmount( const std::string& inRemainingAmount, const char* inDeviceName );
            BOOL putPaperStopRollDiameter( const std::string& inRollDiameter, const char* inDeviceName );
        }

    - Update method CXmlParse::ParseSignalStatus() to put more information to map: Weight, StopRollDiameter, UWWebTension, RWWebTension, RWRollTension.

    - Update method CReceiveSignalStatus::AnalyzeData() with above additional information.

    - In method CReceiveSignalStatus::ReceivePaperInfo(), add parameters for above additional information.

    - In method CReceiveSignalStatus::ReceivePaperInfo(), if values are -1, do not store them to ini file.

    ..  code-block:: C++
        :caption: ReceiveSignalStatus.h

        // before
        class CReceiveSignalStatus
        {
            BOOL ReceivePaperInfo( const std::string& inDescriptiveName,
                const std::string& inDimension,
                const std::string& inMediaType,
                const std::string& inRollDiameter,
                const std::string& inThickness )
        }

        // after
        class CReceiveSignalStatus
        {
            BOOL ReceivePaperInfo( const std::string& inDescriptiveName,
                const std::string& inDimension,
                const std::string& inMediaType,
                const std::string& inRollDiameter,
                const std::string& inThickness,
                const std::string& inWeight,
                const std::string& inStopRollDiameter,
                const std::string& inUWWebTension,
                const std::string& inRWWebTension,
                const std::string& inRWRollTension )
        }
        
    **3. Detail implementation**

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 402.1 Parse signal status info notified from UWandRW_Receiver

            participant CXmlParse as main

            -> main++: ParseSignalStatus(MSXML2::IXMLDOMNodePtr inNode)
                NOTE OVER of main: Old implementation
                NOTE OVER of main
                    pElement_Media->getAttribute(L"Thickness",&val);
                    if ( val.vt != VT_NULL )
                    {
                        bstr = val;
                        m_UwXjmfDataMap["Thickness"] = bstr;
                    }
                END NOTE
                NOTE OVER of main #green
                    pElement_Media->getAttribute(L"Weight",&val);
                    if ( val.vt != VT_NULL )
                    {
                        bstr = val;
                        m_UwXjmfDataMap["Weight"] = bstr;
                    }
                    pElement_Media->getAttribute(L"scr:StopRollDiameter",&val);
                    if ( val.vt != VT_NULL )
                    {
                        bstr = val;
                        m_UwXjmfDataMap["StopRollDiameter"] = bstr;
                    }
                    pElement_Media->getAttribute(L"scr:UWWebTension",&val);
                    if ( val.vt != VT_NULL )
                    {
                        bstr = val;
                        m_UwXjmfDataMap["UWWebTension"] = bstr;
                    }
                    pElement_Media->getAttribute(L"scr:RWWebTension",&val);
                    if ( val.vt != VT_NULL )
                    {
                        bstr = val;
                        m_UwXjmfDataMap["RWWebTension"] = bstr;
                    }
                    pElement_Media->getAttribute(L"scr:RWRollTension",&val);
                    if ( val.vt != VT_NULL )
                    {
                        bstr = val;
                        m_UwXjmfDataMap["RWRollTension"] = bstr;
                    }
                END NOTE
                NOTE OVER of main: Old implementation
            return
            @enduml

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 402.2 Analyze signal status info notified from UWandRW_Receiver

            participant CReceiveSignalStatus as main

            -> main++: AnalyzeData( std::string& inXmldata )
                NOTE OVER of main: Old implementation
                NOTE OVER of main
                    std::string Thickness = sUwXjmfDataMap["Thickness"];
                END NOTE
                NOTE OVER of main #green
                    std::string Weight = sUwXjmfDataMap["Weight"];
                    std::string StopRollDiameter = sUwXjmfDataMap["StopRollDiameter"];
                    std::string UWWebTension = sUwXjmfDataMap["UWWebTension"];
                    std::string RWWebTension = sUwXjmfDataMap["RWWebTension"];
                    std::string RWRollTension = sUwXjmfDataMap["RWRollTension"];
                END NOTE
                main-[#red]>main++: <color red><strike>ReceivePaperInfo(DescriptiveName,Dimension,\t\n<color red><strike>MediaType,RollDiameter,Thickness)
                return
                main-[#green]>main++: <color green>ReceivePaperInfo(DescriptiveName,Dimension,\t\n<color green>MediaType,RollDiameter,Thickness,\t\n<color green>Weight, StopRollDiameter, UWWebTension,\t\n<color green>RWWebTension, RWRollTension)
                    NOTE OVER of main #green: Refer to 402.3
                return
                NOTE OVER of main: Old implementation
            return
            @enduml

        ..  uml::

            @startuml
            skinparam noteBackgroundColor #DDDDDD
            skinparam noteBorderColor #666666

            autonumber "<b>[000]"
            hide footbox
            TITLE 402.3 Processing when the paper info is received

            participant CReceiveSignalStatus as main
            participant CIni_UwRwManager_work as ini

            -> main++: ReceivePaperInfo( const std::string& inDescriptiveName,\n\tconst std::string& inDimension,\n\tconst std::string& inMediaType,\n\tconst std::string& inRollDiameter,\n\tconst std::string& inThickness,\n\t<color green>const std::string& inWeight,\n\t<color green>const std::string& inStopRollDiameter,\n\t<color green>const std::string& inUWWebTension,\n\t<color green>const std::string& inRWWebTension,\n\t<color green>const std::string& inRWRollTension )
                NOTE OVER of main: Old implementation
                main-[#red]>ini++: <color red><strike>putPaperRollDiameter(inRollDiameter)
                return
                OPT <color green>inRollDiameter != "-1"
                    main-[#green]>ini++: <color green>putPaperRollDiameter(inRollDiameter, m_DeviceName)
                    return
                END
                NOTE OVER of main: Old implementation
                NOTE OVER of main #red: <strike>m_paperRemainingAmount = atol(vDimension.at(1).c_str());
                main-[#red]>ini++: <color red><strike>putPaperRemainingAmount(vDimension.at(1))
                return
                NOTE OVER of main #green: const std::string& paperRemainingAmount = vDimension.at(1);
                OPT <color green>paperRemainingAmount != "-1"
                    NOTE OVER of main #green: m_paperRemainingAmount = atol(paperRemainingAmount.c_str());
                    main-[#green]>ini++: <color green>putPaperRemainingAmount(paperRemainingAmount, m_DeviceName)
                    return
                END
                OPT <color green>inStopRollDiameter != "-1"
                    main-[#green]>ini++: <color green>putPaperStopRollDiameter(inStopRollDiameter, m_DeviceName)
                    return
                END
                NOTE OVER of main: Old implementation
            return
            @enduml
