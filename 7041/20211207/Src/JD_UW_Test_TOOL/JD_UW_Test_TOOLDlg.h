/**
 * @file  JD_UW_Test_TOOLDlg.h
 * @brief ダイアログ画面 ヘッダーファイル
 * @author screen
 * @date  20210720 screen 新規作成
 **/

#pragma once
#include "afxwin.h"


/**
 * @brief ダイアログ画面
*/
class CClientThread;
class CServerThread;
class CWriteDebugLog;
class CJD_UW_Test_TOOLDlg : public CDialogEx
{
// コンストラクション
public:
	/* ==================================================================================================== */
	/**
		* @brief CJD_UW_Test_TOOLDlg コンストラクション
		* @param  pWriteDebugLog : [i]ログクラスポインタ
		* @param  pParent        : [i]呼び出し元クラスポインタ
	**/
	/* ==================================================================================================== */
	CJD_UW_Test_TOOLDlg( CWriteDebugLog *pWriteDebugLog, CWnd* pParent = NULL);	// 標準コンストラクター

	/* ==================================================================================================== */
	/**
		* @brief CJD_UW_Test_TOOLDlg デストラクション
	**/
	/* ==================================================================================================== */
	virtual ~CJD_UW_Test_TOOLDlg();

	enum { IDD = IDD_JD_UW_TEST_TOOL_DIALOG };
	enum { TIMER_ID_STATUS = 100, TIMER_ID_PAPER };
		 

protected:
	virtual void DoDataExchange(CDataExchange* pDX);	// DDX/DDV サポート

//--------------------------------------
// メンバ関数
//--------------------------------------
protected:
	afx_msg void OnPaint();
	afx_msg HCURSOR OnQueryDragIcon();
	/* ==================================================================================================== */
	/**
		* @brief CJD_UW_Test_TOOLDlg 初期化
		* @retval TRUE(固定)
	**/
	/* ==================================================================================================== */
	virtual BOOL OnInitDialog();

	/* ==================================================================================================== */
	/**
		* @brief 「状態監視」ボタン押下
	**/
	/* ==================================================================================================== */
	afx_msg void OnBnClickedButton1();

	/* ==================================================================================================== */
	/**
		* @brief 「用紙情報登録」ボタン押下
	**/
	/* ==================================================================================================== */
	afx_msg void OnBnClickedButton2();

	/* ==================================================================================================== */
	/**
		* @brief 「チャネル削除」ボタン押下
	**/
	/* ==================================================================================================== */
	afx_msg void OnBnClickedButton3();

	/* ==================================================================================================== */
	/**
		* @brief 「印刷条件設定」ボタン押下
	**/
	/* ==================================================================================================== */
	afx_msg void OnBnClickedButton4();

	/* ==================================================================================================== */
	/**
		* @brief 「READY状態への遷移」ボタン押下
	**/
	/* ==================================================================================================== */
	afx_msg void OnBnClickedButton5();

	/* ==================================================================================================== */
	/**
		* @brief 「送受信ログクリア」ボタン押下
	**/
	/* ==================================================================================================== */
	afx_msg void OnBnClickedButton6();

	/* ==================================================================================================== */
	/**
		* @brief 「用紙情報通知」ボタン押下（対向試験用）
	**/
	/* ==================================================================================================== */
	afx_msg void OnBnClickedButton7();

	afx_msg void OnBnClickedButton8();
	afx_msg void OnBnClickedButton9();
	afx_msg void OnBnClickedButton10();

	/* ==================================================================================================== */
	/**
		* @brief 「終了」ボタン押下
	**/
	/* ==================================================================================================== */
	afx_msg void OnBnEndButton();

	/* ==================================================================================================== */
	/**
		* @brief 「Client処理終了」イベント受信
	**/
	/* ==================================================================================================== */
	afx_msg LRESULT OnJmfSendEnd(WPARAM wParam, LPARAM lParam);

	/* ==================================================================================================== */
	/**
		* @brief 「送信データ表示」イベント受信
	**/
	/* ==================================================================================================== */
	afx_msg LRESULT OnDispSend(WPARAM wParam, LPARAM lParam);

	/* ==================================================================================================== */
	/**
		* @brief 「受信データ表示」イベント受信
	**/
	/* ==================================================================================================== */
	afx_msg LRESULT OnDispRecv(WPARAM wParam, LPARAM lParam);
	DECLARE_MESSAGE_MAP()

private:
	/* ==================================================================================================== */
	/**
		* @brief 送信関連ボタンを有効/無効にする(送信中は無効)
		* @param  Enable : [i]有効(TRUE)/無効(FALSE)
	**/
	/* ==================================================================================================== */
	void	ButtonControl(BOOL Enable);

//--------------------------------------
// メンバ変数
//--------------------------------------
protected:
	HICON m_hIcon;
private:
	CClientThread*		m_pClientThread;			//!< JMF送信スレッドのポインタ
	UINT				m_nClientThreadID;			//!< JMF送信スレッドのスレッドID
	CServerThread*		m_pServerThread;			//!< JMF受信スレッドのポインタ
	UINT				m_nServerThreadID;			//!< JMF受信スレッドのスレッドID
	CWriteDebugLog*		m_pWriteLog;				//!< ログクラスポインタ

	CEdit				m_editSendMessage;			//!< 送信データ表示エデットボックス
	CEdit				m_editRecvMessage;			//!< 受信データ表示エデットボックス
	CString				m_DispSendMessage;			//!< 送信データ
	CString				m_DispRecvMessage;			//!< 受信データ
	BOOL				m_Send1st;					//!< 送信データ表示初回指標
	BOOL				m_Recv1st;					//!< 受信データ表示初回指標
	int					m_nSendFunction;			//!< 送信データ種別

	BOOL				m_nAutoStatus; 
	BOOL				m_nAutoPaper; 
public:
	afx_msg void OnTimer(UINT_PTR nIDEvent);
};
